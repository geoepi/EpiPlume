---
title: "Dispersian Trajectories"
description: "Trajectories: NOAA HYSPLIT and the splitR package "
date: "2025-04-13"
categories: [R, HPAI]
format:
  gfm:
   toc: true
   toc-depth: 2
   code-fold: show
   code-summary: "Hide code"
   preview-mode: raw
editor: source
editor_options:  
  chunk_output_type: console
---

## Libraries
```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(here)
library(ggmap)
library(ggspatial)
library(sf)
library(terra)
library(gt)
library(pals)

library(splitr)
# devtools::install_github("rich-iannone/splitr")
```

## Custom Functions
```{r}
source(here("R/utilities.R"))
source_dir(here("R"))
```

## Timeout Duration  
To limit meteorological data download times.
```{r}
getOption("timeout")
options(timeout=10000)
```

## Create Study Area Grid  
Choosing an arbitrary geographic point.  It will serve as the emission point source location and be used to define study area extent.  
```{r}
source_origin <- c(-88.7904, 33.4555)  # Miss State Univ
timezone_utc <- get_timezone_utc(source_origin)

user_projection <- "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"

grid_raster <- create_spatraster_grid(source_origin, user_projection) # projected
grid_raster_geo <- create_spatraster_grid_geo(source_origin) # no proj
```


## Location Map
Register Stadia Maps API to pull background images.  
```{r}
map_api <- yaml::read_yaml(here("local", "secrets.yaml"))
register_stadiamaps(key = map_api$stadi_api)
```
    
Vicinity around source.    
```{r fig.height=10, fig.width=10}
map_plot <- map_grid(grid_raster)
map_plot
```

## Trajectory Model
```{r}
trajectory_model <-
  create_trajectory_model() %>%
  add_trajectory_params(
    traj_name= "traj_1",
    lon = source_origin[1], # long
    lat = source_origin[2], # lat
    height = 5, # height above ground (m)
    duration = 24,
    days = "2020-02-16",
    daily_hours = c(0, 6, 12, 18), # when to run sims
    model_height = 15000,
    direction = "forward",
    extended_met = TRUE,
    met_type = "nam12",
    met_dir = here("local/traj"),
    exec_dir = here("local/traj")
  ) %>%
  add_trajectory_params(
    traj_name= "traj_2",
    lon = source_origin[1], # long
    lat = source_origin[2], # lat
    height = 5, # height above ground (m)
    duration = 24,
    days = "2020-02-16",
    daily_hours = c(0, 6, 12, 18),
    model_height = 25000,
    direction = "forward",
    extended_met = TRUE,
    met_type = "nam12",
    met_dir = here("local/traj"), # inputs
    exec_dir = here("local/traj") # outputs
  ) %>%
  run_model()

```

```{r}
# save
saveRDS(trajectory_model, here("local/nam12/trajectory_model.rds"))
```
```{r}
# load saved run
trajectory_model <- readRDS(here("local/nam12/trajectory_model.rds"))
class(trajectory_model)
```

## Results Table  
The interesting outputs are recorded to a datatable in `model$traj_df`.
```{r}
traj_out <- trajectory_model$traj_df

dim(traj_out) 
names(traj_out)

head(traj_out)
```


## Plot Trajectories
```{r fig.height=10, fig.width=10, warning=FALSE, message=FALSE}
traj_plot <- map_grid2(grid_raster, traj_out, group_col = "run", vector_type = "line", line_size = 2)
traj_plot
```
