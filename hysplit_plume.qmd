---
title: "Plume Dispersian Model"
description: "Plumes: NOAA HYSPLIT and the splitR package "
date: "2025-04-13"
categories: [R, HPAI]
format:
  gfm:
   toc: true
   toc-depth: 2
   code-fold: show
   code-summary: "Hide code"
   preview-mode: raw
editor: source
editor_options:  
  chunk_output_type: console
---

## Libraries
```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(here)
library(ggmap)
library(ggspatial)
library(sf)
library(terra)
library(gt)
library(pals)

library(splitr)
# devtools::install_github("rich-iannone/splitr")
```

## Custom Functions
```{r}
source(here("R/utilities.R"))
source_dir(here("R"))
```

## Timeout Duration  
To limit meteorological data download times.
```{r}
getOption("timeout")
options(timeout=10000)
```

## Create Study Area Grid  
Choosing an arbitrary geographic point.  It will serve as the emission point source location and be used to define study area extent.  
```{r}
source_origin <- c(-88.7904, 33.4555)  # Miss State Univ
timezone_utc <- get_timezone_utc(source_origin)

user_projection <- "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs"

grid_raster <- create_spatraster_grid(source_origin, user_projection) # projected
grid_raster_geo <- create_spatraster_grid_geo(source_origin) # no proj
```


## Location Map
Register Stadia Maps API to pull background images.  
```{r}
map_api <- yaml::read_yaml(here("local", "secrets.yaml"))
register_stadiamaps(key = map_api$stadi_api)
```
    
Vicinity around source.    
```{r fig.height=10, fig.width=10}
map_plot <- map_grid(grid_raster)
map_plot
```

## Dispersion Model

### Parameters  
Pathogen half life estimation.  Not clear that **splitR**is using this parameter correctly...  Could desired effect could be handled in post processing. The *calculate_half_life()* assumes exponential decay.  
```{r}
virus_viability <- 3 # days until virus is non viable
viability_threshold <- 0.05 # this % maybe viable after the above virus_viability period
virus_hl <- calculate_half_life(virus_viability, viability_threshold)
virus_hl # daily reduction in virus viability
```

### Initiate Model
```{r}
dispersion_msu <- create_dispersion_model()
```

### Add Points Source  
Setting the source details.  
  
Estimating the input emission **rate** is contentious.  A couple poultry house PM tables here [Bist et al, 2022](https://www.mdpi.com/2076-3417/12/22/11323).
```{r}
dispersion_msu <- dispersion_msu %>%
  add_source(
    name = "pathogen", 
    lon = source_origin[1],
    lat = source_origin[2],
    height = 5, # height above ground
    rate = 100, # particle emission rate
    pdiam = 2.5, # particle diameter, micrometers
    density = 1.5, # particle density in units of g/cm3
    shape_factor = 0.6, # shape/friction, 0-1 (smoothness, 1.0 is spherical)
    rad_decay = virus_hl, # pathogen viabaility
    release_start = ymd_hm("2020-02-16 10:00"),
    release_end = ymd_hm("2020-02-16 10:00") + hours(36)
  )

```
  
### Dispersion Parameters  
```{r}
dispersion_msu <- dispersion_msu %>%
  add_dispersion_params(
    start_time = ymd_hm("2020-02-16 10:00"),
    end_time = ymd_hm("2020-02-16 10:00") + hours(36), 
    direction = "forward", 
    #met_type = "gdas1",
    met_type = "nam12", # highest res in splitR
    met_dir = here("local/nam12"), # previously downloaded meteorological data
    exec_dir = here("local/nam12"), # outputs
    clean_up= FALSE
  ) 
```

### Run Model   
This *run_model()* takes 3-5mins...  Saving a local copy for later.      
```{r eval=FALSE}
dispersion_msu <- dispersion_msu %>%
  run_model()

# save
saveRDS(dispersion_msu, here("local/nam12/dispersion_msu.rds"))
```
```{r}
# load saved run
dispersion_msu <- readRDS(here("local/nam12/dispersion_msu.rds"))
class(dispersion_msu)
```

## Results Table  
The interesting outputs are recorded to a datatable in `model$disp_df`.
```{r}
plume_table <- dispersion_msu$disp_df

dim(plume_table)
length(unique(plume_table$particle_i))

gt(plume_table)
```

## Plot Dispersion
The base **splitr** plot. Interactive when locally run.    
```{r fig.height=10, fig.width=10, warning=FALSE, message=FALSE}
plot_dispersion(plume_table)
```

Custom static plot for quick viewing. Work in progress... 
```{r eval=FALSE, fig.height=10, fig.width=10, warning=FALSE, message=FALSE}
# not rub
plume_plot <- map_grid2(grid_raster, plume_table, group_col = "particle_i", vector_type = "point")
plume_plot
```
  
Animated plot.  
```{r eval=FALSE}
# animated_plume <- animate_plume(grid_raster, plume_table, group_col = "particle_i")

animated_plume <- animate_plume_simple(plume_table, group_col = "particle_i", point_size = 0.5)
animated_plume

# save
anim_save(here("assets/plume_animation.gif"), animation = animated_plume)
```

```{r fig.height=10, fig.width=10, warning=FALSE, message=FALSE}
knitr::include_graphics("assets/plume_animation.gif")
```
